{"mappings":"ACEA,MAAM,EAAQ,AAAA,GACL,IAAI,QAAQ,CAAC,EAAK,KACvB,WAAW,KACT,EAAI,EACN,EAAG,EACL,GAGI,EAAc,AAAA,GAAQ,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,EAAK,EAAE,CAAC,EAElE,EAAM,KAAM,IAAI,CAAC,GACjB,EAAM,KAAM,IAAI,CAAC,GACjB,EAAM,MAAM,IAAI,CAAC,GAIjB,MAAM,EAAQ,CACZ,CAAE,KAAM,QAAS,OAAQ,CAAA,CAAK,EAC9B,CAAE,KAAM,OAAQ,OAAQ,CAAA,CAAM,EAC9B,CAAE,KAAM,OAAQ,OAAQ,CAAA,CAAK,EAC7B,CAAE,KAAM,MAAO,OAAQ,CAAA,CAAM,EAC9B,CAEK,EAAkB,CAAC,EAAU,IAC1B,IAAI,QAAQ,CAAC,EAAK,KAKvB,EAJqB,EAAS,GAAG,CAAC,AAAA,GAChC,EAAK,IAAI,GAAK,EAAW,CAAE,GAAG,CAAI,CAAE,OAAQ,CAAC,EAAK,MAAM,AAAC,EAAI,GAIjE,GAGI,EAAS,AAAC,GAAiB,QAAQ,KAAK,CAAC,GAE/C,EAAgB,EAAO,SAAS,IAAI,CAAC,GACrC,EAAgB,EAAO,OAAO,IAAI,CAAC,GAInC,MAAM,EAA4B,CAAC,EAAK,IAC/B,KAAK,KAAK,CAAC,KAAK,MAAM,GAAM,CAAA,EAAM,EAAM,CAAA,EAAK,GAGhD,EAAkB,AAAC,GAChB,IAAI,QAAQ,CAAC,EAAK,KACvB,IAAM,EAAQ,EAA0B,IAAK,KAC7C,WAAW,KACU,KAAK,MAAM,GAAK,GAGjC,EAAI,CAAC,GAAI,EAAY,EAAE,CAAE,KAAM,CAAK,GAEpC,EAAI,EAAY,EAAE,CAEtB,EAAG,EACL,GAGI,EAAa,CAAC,CAAA,GAAC,CAAE,CAAA,KAAE,CAAI,CAAC,IAC5B,QAAQ,GAAG,CAAC,CAAC,YAAY,EAAE,EAAG,cAAc,EAAE,EAAK,GAAG,CAAC,CACzD,EAEM,EAAW,AAAC,IAChB,QAAQ,IAAI,CAAC,CAAC,6BAA6B,EAAE,EAAG,yBAAyB,CAAC,CAC5E,EAGA,EAAgB,CAAE,GAAI,GAAI,OAAQ,GAAI,GAAG,IAAI,CAAC,GAAY,KAAK,CAAC,GAChE,EAAgB,CAAE,GAAI,GAAI,OAAQ,GAAI,GAAG,IAAI,CAAC,GAAY,KAAK,CAAC,GAChE,EAAgB,CAAE,GAAI,GAAI,OAAQ,EAAG,GAAG,IAAI,CAAC,GAAY,KAAK,CAAC,GAC/D,EAAgB,CAAE,GAAI,GAAI,OAAQ,GAAI,GAAG,IAAI,CAAC,GAAY,KAAK,CAAC","sources":["<anon>","src/index.js"],"sourcesContent":["var $35da740d59af89ba$exports = {};\n// 1\nconst $35da740d59af89ba$var$delay = (ms)=>{\n    return new Promise((res, rej)=>{\n        setTimeout(()=>{\n            res(ms);\n        }, ms);\n    });\n};\nconst $35da740d59af89ba$var$Firstlogger = (time)=>console.log(`Resolved after ${time}ms`);\n$35da740d59af89ba$var$delay(2000).then($35da740d59af89ba$var$Firstlogger); // Resolved after 2000ms\n$35da740d59af89ba$var$delay(1000).then($35da740d59af89ba$var$Firstlogger); // Resolved after 1000ms\n$35da740d59af89ba$var$delay(1500).then($35da740d59af89ba$var$Firstlogger); // Resolved after 1500ms\n// 2\nconst $35da740d59af89ba$var$users = [\n    {\n        name: 'Mango',\n        active: true\n    },\n    {\n        name: 'Poly',\n        active: false\n    },\n    {\n        name: 'Ajax',\n        active: true\n    },\n    {\n        name: 'Lux',\n        active: false\n    }\n];\nconst $35da740d59af89ba$var$toggleUserState = (allUsers, userName)=>{\n    return new Promise((res, rej)=>{\n        const updatedUsers = allUsers.map((user)=>user.name === userName ? {\n                ...user,\n                active: !user.active\n            } : user);\n        res(updatedUsers);\n    });\n};\nconst $35da740d59af89ba$var$logger = (updatedUsers)=>console.table(updatedUsers);\n$35da740d59af89ba$var$toggleUserState($35da740d59af89ba$var$users, 'Mango').then($35da740d59af89ba$var$logger);\n$35da740d59af89ba$var$toggleUserState($35da740d59af89ba$var$users, 'Lux').then($35da740d59af89ba$var$logger);\n// 3\nconst $35da740d59af89ba$var$randomIntegerFromInterval = (min, max)=>{\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\nconst $35da740d59af89ba$var$makeTransaction = (transaction)=>{\n    return new Promise((res, rej)=>{\n        const delay = $35da740d59af89ba$var$randomIntegerFromInterval(200, 500);\n        setTimeout(()=>{\n            const canProcess = Math.random() > 0.3;\n            if (canProcess) res({\n                id: transaction.id,\n                time: delay\n            });\n            else rej(transaction.id);\n        }, delay);\n    });\n};\nconst $35da740d59af89ba$var$logSuccess = ({ id: id, time: time })=>{\n    console.log(`Transaction ${id} processed in ${time} ms`);\n};\nconst $35da740d59af89ba$var$logError = (id)=>{\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n$35da740d59af89ba$var$makeTransaction({\n    id: 70,\n    amount: 150\n}).then($35da740d59af89ba$var$logSuccess).catch($35da740d59af89ba$var$logError);\n$35da740d59af89ba$var$makeTransaction({\n    id: 71,\n    amount: 230\n}).then($35da740d59af89ba$var$logSuccess).catch($35da740d59af89ba$var$logError);\n$35da740d59af89ba$var$makeTransaction({\n    id: 72,\n    amount: 75\n}).then($35da740d59af89ba$var$logSuccess).catch($35da740d59af89ba$var$logError);\n$35da740d59af89ba$var$makeTransaction({\n    id: 73,\n    amount: 100\n}).then($35da740d59af89ba$var$logSuccess).catch($35da740d59af89ba$var$logError);\n\n\n//# sourceMappingURL=homework-promise.8c6baec6.js.map\n","// 1\r\n\r\nconst delay = ms => {\r\n  return new Promise((res, rej) => {\r\n    setTimeout(() => {\r\n      res(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst Firstlogger = time => console.log(`Resolved after ${time}ms`);\r\n\r\ndelay(2000).then(Firstlogger); // Resolved after 2000ms\r\ndelay(1000).then(Firstlogger); // Resolved after 1000ms\r\ndelay(1500).then(Firstlogger); // Resolved after 1500ms\r\n\r\n// 2\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise((res, rej) => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user\r\n    );\r\n\r\n    res(updatedUsers);\r\n  });\r\n};\r\n\r\nconst logger = (updatedUsers) => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n\r\n// 3\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n  return new Promise((res, rej) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        res({id: transaction.id, time: delay});\r\n      } else {\r\n        rej(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ({id, time}) => {\r\n  console.log(`Transaction ${id} processed in ${time} ms`);\r\n};\r\n\r\nconst logError = (id) => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n"],"names":["$35da740d59af89ba$var$delay","ms","Promise","res","rej","setTimeout","$35da740d59af89ba$var$Firstlogger","time","console","log","then","$35da740d59af89ba$var$users","name","active","$35da740d59af89ba$var$toggleUserState","allUsers","userName","map","user","$35da740d59af89ba$var$logger","updatedUsers","table","$35da740d59af89ba$var$randomIntegerFromInterval","min","max","Math","floor","random","$35da740d59af89ba$var$makeTransaction","transaction","delay","id","$35da740d59af89ba$var$logSuccess","$35da740d59af89ba$var$logError","warn","amount","catch"],"version":3,"file":"homework-promise.8c6baec6.js.map"}